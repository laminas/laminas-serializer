{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"laminas-serializer üá∑üá∫ –†—É—Å—Å–∫–∏–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º –ú—ã, —É—á–∞—Å—Ç–Ω–∏–∫–∏ Laminas, —Ä–æ–¥–∏–ª–∏—Å—å –∏ –∂–∏–≤–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö. –£ –º–Ω–æ–≥–∏—Ö –∏–∑ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ –∏ –∫–æ–ª–ª–µ–≥–∏ –∫–∞–∫ –≤ –†–æ—Å—Å–∏–∏, —Ç–∞–∫ –∏ –≤ –£–∫—Ä–∞–∏–Ω–µ. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å —Ä–æ–¥–∏–ª–∏—Å—å –≤ –†–æ—Å—Å–∏–∏. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å –∂–∏–≤—É—Ç –≤ –†–æ—Å—Å–∏–∏. –£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∞–±—É—à–∫–∏ –∏ –¥–µ–¥—É—à–∫–∏ —Å—Ä–∞–∂–∞–ª–∏—Å—å —Å —Ñ–∞—à–∏—Å—Ç–∞–º–∏ –≤–æ –í—Ç–æ—Ä–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω–µ. –ó–¥–µ—Å—å –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞—à–∏–∑–º. –£ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∞—Å –µ—Å—Ç—å —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–ø–∞—Å–ª–∞—Å—å –∏–∑ –¥–æ–º–∞ –≤–º–µ—Å—Ç–µ —Å —Å—ã–Ω–æ–º. –ü–æ–µ–∑–¥ –∑–∞–¥–µ—Ä–∂–∞–ª—Å—è –∏–∑-–∑–∞ –±–æ–º–±–µ–∂–∫–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ –≤–ø–µ—Ä–µ–¥–∏. –£ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä—è—á—É—Ç—Å—è –≤ –±–æ–º–±–æ—É–±–µ–∂–∏—â–∞—Ö. –ú—ã —Å —Ç—Ä–µ–≤–æ–≥–æ–π –∂–¥–µ–º –≤–µ—Å—Ç–æ—á–∫–∏ –æ—Ç –Ω–∏—Ö –ø–æ—Å–ª–µ –≤–æ–∑–¥—É—à–Ω—ã—Ö –Ω–∞–ª–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±–µ—Å–ø–æ—Ä—è–¥–æ—á–Ω–æ –Ω–∞–Ω–æ—Å—è—Ç —É–¥–∞—Ä—ã –∏ –ø–æ–ø–∞–¥–∞—é—Ç –ø–æ –±–æ–ª—å–Ω–∏—Ü–∞–º, —à–∫–æ–ª–∞–º, –¥–µ—Ç—Å–∫–∏–º —Å–∞–¥–∞–º –∏ –¥–æ–º–∞–º. –ú—ã –Ω–µ –±–µ—Ä–µ–º —ç—Ç–æ –∏–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –°–ú–ò. –ú—ã –Ω–∞–±–ª—é–¥–∞–µ–º —ç—Ç–æ –Ω–∞–ø—Ä—è–º—É—é. –í—ã –¥–æ–≤–µ—Ä—è–µ—Ç–µ –Ω–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∏ –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –Ω–∞–º –≤–Ω–æ–≤—å. –ú—ã –Ω—É–∂–¥–∞–µ–º—Å—è –≤ –ø–æ–º–æ—â–∏. –í—ã—Ö–æ–¥–∏—Ç–µ –∏ –ø—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ —ç—Ç–æ–π –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ–π –≤–æ–π–Ω—ã. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫—Ä–æ–≤–æ–ø—Ä–æ–ª–∏—Ç–∏–µ. –°–∫–∞–∂–∏—Ç–µ \"–ù–µ—Ç –≤–æ–π–Ω–µ!\" üá∫üá∏ To Citizens of Russia We at Laminas come from all over the world. Many of us have friends, family and colleagues in both Russia and Ukraine. Some of us were born in Russia. Some of us currently live in Russia. Some have grandparents who fought Nazis in World War II. Nobody here supports fascism. One team member has a Ukrainian relative who fled her home with her son. The train was delayed due to bombing on the road ahead. We have friends who are hiding in bomb shelters. We anxiously follow up on them after the air raids, which indiscriminately fire at hospitals, schools, kindergartens and houses. We're not taking this from any media. These are our actual experiences. You trust us enough to use our software. We ask that you trust us to say the truth on this. We need your help. Go out and protest this unnecessary war. Stop the bloodshed. Say \"stop the war!\" laminas-serializer provides an adapter-based interface for generating and recovering from storable representations of PHP types. File issues at https://github.com/laminas/laminas-serializer/issues Documentation is at https://docs.laminas.dev/laminas-serializer/","title":"Home"},{"location":"#laminas-serializer","text":"","title":"laminas-serializer"},{"location":"#_1","text":"–ú—ã, —É—á–∞—Å—Ç–Ω–∏–∫–∏ Laminas, —Ä–æ–¥–∏–ª–∏—Å—å –∏ –∂–∏–≤–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö. –£ –º–Ω–æ–≥–∏—Ö –∏–∑ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ –∏ –∫–æ–ª–ª–µ–≥–∏ –∫–∞–∫ –≤ –†–æ—Å—Å–∏–∏, —Ç–∞–∫ –∏ –≤ –£–∫—Ä–∞–∏–Ω–µ. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å —Ä–æ–¥–∏–ª–∏—Å—å –≤ –†–æ—Å—Å–∏–∏. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å –∂–∏–≤—É—Ç –≤ –†–æ—Å—Å–∏–∏. –£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∞–±—É—à–∫–∏ –∏ –¥–µ–¥—É—à–∫–∏ —Å—Ä–∞–∂–∞–ª–∏—Å—å —Å —Ñ–∞—à–∏—Å—Ç–∞–º–∏ –≤–æ –í—Ç–æ—Ä–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω–µ. –ó–¥–µ—Å—å –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞—à–∏–∑–º. –£ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∞—Å –µ—Å—Ç—å —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–ø–∞—Å–ª–∞—Å—å –∏–∑ –¥–æ–º–∞ –≤–º–µ—Å—Ç–µ —Å —Å—ã–Ω–æ–º. –ü–æ–µ–∑–¥ –∑–∞–¥–µ—Ä–∂–∞–ª—Å—è –∏–∑-–∑–∞ –±–æ–º–±–µ–∂–∫–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ –≤–ø–µ—Ä–µ–¥–∏. –£ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä—è—á—É—Ç—Å—è –≤ –±–æ–º–±–æ—É–±–µ–∂–∏—â–∞—Ö. –ú—ã —Å —Ç—Ä–µ–≤–æ–≥–æ–π –∂–¥–µ–º –≤–µ—Å—Ç–æ—á–∫–∏ –æ—Ç –Ω–∏—Ö –ø–æ—Å–ª–µ –≤–æ–∑–¥—É—à–Ω—ã—Ö –Ω–∞–ª–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±–µ—Å–ø–æ—Ä—è–¥–æ—á–Ω–æ –Ω–∞–Ω–æ—Å—è—Ç —É–¥–∞—Ä—ã –∏ –ø–æ–ø–∞–¥–∞—é—Ç –ø–æ –±–æ–ª—å–Ω–∏—Ü–∞–º, —à–∫–æ–ª–∞–º, –¥–µ—Ç—Å–∫–∏–º —Å–∞–¥–∞–º –∏ –¥–æ–º–∞–º. –ú—ã –Ω–µ –±–µ—Ä–µ–º —ç—Ç–æ –∏–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –°–ú–ò. –ú—ã –Ω–∞–±–ª—é–¥–∞–µ–º —ç—Ç–æ –Ω–∞–ø—Ä—è–º—É—é. –í—ã –¥–æ–≤–µ—Ä—è–µ—Ç–µ –Ω–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∏ –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –Ω–∞–º –≤–Ω–æ–≤—å. –ú—ã –Ω—É–∂–¥–∞–µ–º—Å—è –≤ –ø–æ–º–æ—â–∏. –í—ã—Ö–æ–¥–∏—Ç–µ –∏ –ø—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ —ç—Ç–æ–π –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ–π –≤–æ–π–Ω—ã. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫—Ä–æ–≤–æ–ø—Ä–æ–ª–∏—Ç–∏–µ. –°–∫–∞–∂–∏—Ç–µ \"–ù–µ—Ç –≤–æ–π–Ω–µ!\"","title":"üá∑üá∫ –†—É—Å—Å–∫–∏–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º"},{"location":"#to-citizens-of-russia","text":"We at Laminas come from all over the world. Many of us have friends, family and colleagues in both Russia and Ukraine. Some of us were born in Russia. Some of us currently live in Russia. Some have grandparents who fought Nazis in World War II. Nobody here supports fascism. One team member has a Ukrainian relative who fled her home with her son. The train was delayed due to bombing on the road ahead. We have friends who are hiding in bomb shelters. We anxiously follow up on them after the air raids, which indiscriminately fire at hospitals, schools, kindergartens and houses. We're not taking this from any media. These are our actual experiences. You trust us enough to use our software. We ask that you trust us to say the truth on this. We need your help. Go out and protest this unnecessary war. Stop the bloodshed. Say \"stop the war!\" laminas-serializer provides an adapter-based interface for generating and recovering from storable representations of PHP types. File issues at https://github.com/laminas/laminas-serializer/issues Documentation is at https://docs.laminas.dev/laminas-serializer/","title":"üá∫üá∏ To Citizens of Russia"},{"location":"v2/adapter/","text":"Adapters laminas-serializer adapters handle serialization to and deserialization from specific representations. Each adapter has its own strengths. In some cases, not every PHP datatype (e.g., objects) can be converted to a string representation. In most such cases, the type will be converted to a similar type that is serializable. As an example, PHP objects will often be cast to arrays. If this fails, a Laminas\\Serializer\\Exception\\ExceptionInterface will be thrown. The PhpSerialize Adapter The Laminas\\Serializer\\Adapter\\PhpSerialize adapter uses the built-in serialize() / unserialize() functions, and is a good default adapter choice. Available options include: Option Data Type Default Value Description unserialize_class_whitelist array or bool true The allowed classes for unserialize(), see unserialize() for more information. Only available on PHP 7.0 or higher. The IgBinary Adapter Igbinary was originally released by Sulake Dynamoid Oy and since 2011-03-14 moved to PECL and maintained by Pierre Joye. It's a drop-in replacement for the standard PHP serializer. Instead of using a costly textual representation, igbinary stores PHP data structures in a compact binary form. Savings are significant when using memcached or similar memory based storages for serialized data. You need the igbinary PHP extension installed on your system in order to use this adapter. There are no configurable options for this adapter. The Json Adapter The JSON adapter provides a bridge to the laminas-json component. Available options include: Option Data Type Default Value cycle_check boolean false object_decode_type Laminas\\Json\\Json::TYPE_* Laminas\\Json\\Json::TYPE_ARRAY enable_json_expr_finder boolean false The PhpCode Adapter The Laminas\\Serializer\\Adapter\\PhpCode adapter generates a parsable PHP code representation using var_export() . To restore, the data will be executed using eval . There are no configuration options for this adapter. Warning: Unserializing objects Objects will be serialized using the __set_state magic method. If the class doesn't implement this method, a fatal error will occur during execution. Warning: Uses eval() The PhpCode adapter utilizes eval() to unserialize. This introduces both a performance and potential security issue as a new process will be executed. Typically, you should use the PhpSerialize adapter unless you require human-readability of the serialized data. The PythonPickle Adapter This adapter converts PHP types to a Python Pickle string representation. With it, you can read the serialized data with Python and read Pickled data from Python with PHP. This adapter requires the laminas-math component: $ composer require laminas/laminas-math Available options include: Option Data Type Default Value Description protocol integer (0/1/2/3) 0 The Pickle protocol version used on serialize Datatype merging (PHP to Python Pickle) PHP Type Python Pickle Type NULL None boolean boolean integer integer float float string string array list list array map dictionary object dictionary Datatype merging (Python Pickle to PHP) Python Pickle Type PHP Type None NULL boolean boolean integer integer long integer , float , string , or Laminas\\Serializer\\Exception\\ExceptionInterface float float string string bytes string unicode string string UTF-8 list array list tuple array list dictionary array map All other types Laminas\\Serializer\\Exception\\ExceptionInterface The Wddx Adapter WDDX (Web Distributed Data eXchange) is a programming-language-, platform-, and transport-neutral data interchange mechanism for passing data between different environments and different computers. The adapter uses the wddx PHP functions. Please read the PHP manual to determine how you may enable them in your installation. Additionally, the SimpleXML extension is used to check if a returned NULL value from wddx_unserialize() is based on a serialized NULL or on invalid data. Available options include: Option Data Type Default Value Description comment string An optional comment that appears in the packet header.","title":"Adapters"},{"location":"v2/adapter/#adapters","text":"laminas-serializer adapters handle serialization to and deserialization from specific representations. Each adapter has its own strengths. In some cases, not every PHP datatype (e.g., objects) can be converted to a string representation. In most such cases, the type will be converted to a similar type that is serializable. As an example, PHP objects will often be cast to arrays. If this fails, a Laminas\\Serializer\\Exception\\ExceptionInterface will be thrown.","title":"Adapters"},{"location":"v2/adapter/#the-phpserialize-adapter","text":"The Laminas\\Serializer\\Adapter\\PhpSerialize adapter uses the built-in serialize() / unserialize() functions, and is a good default adapter choice. Available options include: Option Data Type Default Value Description unserialize_class_whitelist array or bool true The allowed classes for unserialize(), see unserialize() for more information. Only available on PHP 7.0 or higher.","title":"The PhpSerialize Adapter"},{"location":"v2/adapter/#the-igbinary-adapter","text":"Igbinary was originally released by Sulake Dynamoid Oy and since 2011-03-14 moved to PECL and maintained by Pierre Joye. It's a drop-in replacement for the standard PHP serializer. Instead of using a costly textual representation, igbinary stores PHP data structures in a compact binary form. Savings are significant when using memcached or similar memory based storages for serialized data. You need the igbinary PHP extension installed on your system in order to use this adapter. There are no configurable options for this adapter.","title":"The IgBinary Adapter"},{"location":"v2/adapter/#the-json-adapter","text":"The JSON adapter provides a bridge to the laminas-json component. Available options include: Option Data Type Default Value cycle_check boolean false object_decode_type Laminas\\Json\\Json::TYPE_* Laminas\\Json\\Json::TYPE_ARRAY enable_json_expr_finder boolean false","title":"The Json Adapter"},{"location":"v2/adapter/#the-phpcode-adapter","text":"The Laminas\\Serializer\\Adapter\\PhpCode adapter generates a parsable PHP code representation using var_export() . To restore, the data will be executed using eval . There are no configuration options for this adapter.","title":"The PhpCode Adapter"},{"location":"v2/adapter/#the-pythonpickle-adapter","text":"This adapter converts PHP types to a Python Pickle string representation. With it, you can read the serialized data with Python and read Pickled data from Python with PHP. This adapter requires the laminas-math component: $ composer require laminas/laminas-math Available options include: Option Data Type Default Value Description protocol integer (0/1/2/3) 0 The Pickle protocol version used on serialize","title":"The PythonPickle Adapter"},{"location":"v2/adapter/#the-wddx-adapter","text":"WDDX (Web Distributed Data eXchange) is a programming-language-, platform-, and transport-neutral data interchange mechanism for passing data between different environments and different computers. The adapter uses the wddx PHP functions. Please read the PHP manual to determine how you may enable them in your installation. Additionally, the SimpleXML extension is used to check if a returned NULL value from wddx_unserialize() is based on a serialized NULL or on invalid data. Available options include: Option Data Type Default Value Description comment string An optional comment that appears in the packet header.","title":"The Wddx Adapter"},{"location":"v2/intro/","text":"Introduction laminas-serialzier provides an adapter-based interface for serializing and deserializing PHP types to and from different representations. For more information what a serializer is read the wikipedia page of Serialization . Quick Start Serializing adapters can either be created from the provided Laminas\\Serializer\\Serializer::factory method, or by instantiating one of the Laminas\\Serializer\\Adapter\\* classes. use Laminas\\Serializer\\Adapter; use Laminas\\Serializer\\Exception; use Laminas\\Serializer\\Serializer; // Via factory: $serializer = Serializer::factory(Adapter\\PhpSerialize::class); // Alternately: $serializer = new Adapter\\PhpSerialize(); // Now $serializer is an instance of Laminas\\Serializer\\Adapter\\AdapterInterface, // specifically Laminas\\Serializer\\Adapter\\PhpSerialize try { $serialized = $serializer-&gt;serialize($data); // now $serialized is a string $unserialized = $serializer-&gt;unserialize($serialized); // now $data == $unserialized } catch (Exception\\ExceptionInterface $e) { echo $e; } The method serialize() generates a storable string. To regenerate this serialized data, call the method unserialize() . Any time an error is encountered serializing or unserializing, the adapter will throw a Laminas\\Serializer\\Exception\\ExceptionInterface . Because an application often uses only one serializer internally, it is possible to define and use a default serializer. That serializer will be used by default by other components like Laminas\\Cache\\Storage\\Plugin\\Serializer . To define and use the default serializer, use the static serialization methods of the basic Laminas\\Serializer\\Serializer : use Laminas\\Serializer\\Adapter; use Laminas\\Serializer\\Exception; use Laminas\\Serializer\\Serializer; Serializer::setDefaultAdapter(Adapter\\PhpSerialize::class); try { $serialized = Serializer::serialize($data); // now $serialized is a string $unserialized = Serializer::unserialize($serialized); // now $data == $unserialized } catch (Exception\\ExceptionInterface $e) { echo $e; } Basic configuration Options To configure a serializer adapter, you can optionally use an instance of Laminas\\Serializer\\Adapter\\AdapterOptions , an instance of one of the adapter specific options class, an array , or a Traversable object. The adapter will convert it into the adapter specific options class instance (if present) or into the basic Laminas\\Serializer\\Adapter\\AdapterOptions class instance. Options can be passed as the second argument to the provided Laminas\\Serializer\\Serializer::factory and ::setDefaultAdapter methods, via the adapter's setOptions method, or as constructor arguments when directly instantiating an adapter. Available Methods Each serializer implements the interface Laminas\\Serializer\\Adapter\\AdapterInterface . This interface defines the following methods: Method signature Description serialize(mixed $value) : string Generates a storable representation of a value. unserialize(string $value) : mixed Creates a PHP value from a stored representation. The base class Laminas\\Serializer\\Serializer is used to instantiate the adapters, to configure the factory, and as a proxy for serialization operations. It defines the following static methods, where the following references map to classes/interfaces as follows: AdapterPluginManager : Laminas\\Serializer\\AdapterPluginManager AdapterInterface : Laminas\\Serializer\\Adapter\\AdapterInterface AdapterOptions : Laminas\\Serializer\\Adapter\\AdapterOptions Method signature Description factory(/* ... */) : AdapterInterface Create a serializer adapter instance. Arguments are: string\\|AdapterInterface $adapterName, AdapterOptions\\|array\\|Traversable $adapterOptions = null . setAdapterPluginManager(AdapterPluginManager $adapters) : void Change the adapter plugin manager. getAdapterPluginManager() : AdapterPluginManager Get the adapter plugin manager. resetAdapterPluginManager() : void Resets the internal adapter plugin manager. setDefaultAdapter(string\\|AdapterInterface $adapter /* ... */): void Change the default adapter. Full argument list: string\\|AdapterInterface $adapter, AdapterOptions\\|array\\|Traversable $adapterOptions = null . getDefaultAdapter() : AdapterInterface Get the default adapter. serialize(mixed $data /* ... */) : string Generates a storable representation of a value using the default adapter. Optionally, provide a different adapter via the second argument. Full argument list: mixed $value, string\\|AdapterInterface $adapter = null, AdapterOptions\\|array\\|Traversable $adapterOptions = null . unserialize(string $value /* ... */) : mixed Creates a PHP value from a stored representation using the default adapter. Optionally, provide a different adapter via the second argument. Full argument list: string $value, string\\|AdapterInterface\\|null $adapter = null, AdapterOptions\\|array\\|Traversable $adapterOptions = null","title":"Introduction"},{"location":"v2/intro/#introduction","text":"laminas-serialzier provides an adapter-based interface for serializing and deserializing PHP types to and from different representations. For more information what a serializer is read the wikipedia page of Serialization .","title":"Introduction"},{"location":"v2/intro/#quick-start","text":"Serializing adapters can either be created from the provided Laminas\\Serializer\\Serializer::factory method, or by instantiating one of the Laminas\\Serializer\\Adapter\\* classes. use Laminas\\Serializer\\Adapter; use Laminas\\Serializer\\Exception; use Laminas\\Serializer\\Serializer; // Via factory: $serializer = Serializer::factory(Adapter\\PhpSerialize::class); // Alternately: $serializer = new Adapter\\PhpSerialize(); // Now $serializer is an instance of Laminas\\Serializer\\Adapter\\AdapterInterface, // specifically Laminas\\Serializer\\Adapter\\PhpSerialize try { $serialized = $serializer-&gt;serialize($data); // now $serialized is a string $unserialized = $serializer-&gt;unserialize($serialized); // now $data == $unserialized } catch (Exception\\ExceptionInterface $e) { echo $e; } The method serialize() generates a storable string. To regenerate this serialized data, call the method unserialize() . Any time an error is encountered serializing or unserializing, the adapter will throw a Laminas\\Serializer\\Exception\\ExceptionInterface . Because an application often uses only one serializer internally, it is possible to define and use a default serializer. That serializer will be used by default by other components like Laminas\\Cache\\Storage\\Plugin\\Serializer . To define and use the default serializer, use the static serialization methods of the basic Laminas\\Serializer\\Serializer : use Laminas\\Serializer\\Adapter; use Laminas\\Serializer\\Exception; use Laminas\\Serializer\\Serializer; Serializer::setDefaultAdapter(Adapter\\PhpSerialize::class); try { $serialized = Serializer::serialize($data); // now $serialized is a string $unserialized = Serializer::unserialize($serialized); // now $data == $unserialized } catch (Exception\\ExceptionInterface $e) { echo $e; }","title":"Quick Start"},{"location":"v2/intro/#basic-configuration-options","text":"To configure a serializer adapter, you can optionally use an instance of Laminas\\Serializer\\Adapter\\AdapterOptions , an instance of one of the adapter specific options class, an array , or a Traversable object. The adapter will convert it into the adapter specific options class instance (if present) or into the basic Laminas\\Serializer\\Adapter\\AdapterOptions class instance. Options can be passed as the second argument to the provided Laminas\\Serializer\\Serializer::factory and ::setDefaultAdapter methods, via the adapter's setOptions method, or as constructor arguments when directly instantiating an adapter.","title":"Basic configuration Options"},{"location":"v2/intro/#available-methods","text":"Each serializer implements the interface Laminas\\Serializer\\Adapter\\AdapterInterface . This interface defines the following methods: Method signature Description serialize(mixed $value) : string Generates a storable representation of a value. unserialize(string $value) : mixed Creates a PHP value from a stored representation. The base class Laminas\\Serializer\\Serializer is used to instantiate the adapters, to configure the factory, and as a proxy for serialization operations. It defines the following static methods, where the following references map to classes/interfaces as follows: AdapterPluginManager : Laminas\\Serializer\\AdapterPluginManager AdapterInterface : Laminas\\Serializer\\Adapter\\AdapterInterface AdapterOptions : Laminas\\Serializer\\Adapter\\AdapterOptions Method signature Description factory(/* ... */) : AdapterInterface Create a serializer adapter instance. Arguments are: string\\|AdapterInterface $adapterName, AdapterOptions\\|array\\|Traversable $adapterOptions = null . setAdapterPluginManager(AdapterPluginManager $adapters) : void Change the adapter plugin manager. getAdapterPluginManager() : AdapterPluginManager Get the adapter plugin manager. resetAdapterPluginManager() : void Resets the internal adapter plugin manager. setDefaultAdapter(string\\|AdapterInterface $adapter /* ... */): void Change the default adapter. Full argument list: string\\|AdapterInterface $adapter, AdapterOptions\\|array\\|Traversable $adapterOptions = null . getDefaultAdapter() : AdapterInterface Get the default adapter. serialize(mixed $data /* ... */) : string Generates a storable representation of a value using the default adapter. Optionally, provide a different adapter via the second argument. Full argument list: mixed $value, string\\|AdapterInterface $adapter = null, AdapterOptions\\|array\\|Traversable $adapterOptions = null . unserialize(string $value /* ... */) : mixed Creates a PHP value from a stored representation using the default adapter. Optionally, provide a different adapter via the second argument. Full argument list: string $value, string\\|AdapterInterface\\|null $adapter = null, AdapterOptions\\|array\\|Traversable $adapterOptions = null","title":"Available Methods"},{"location":"v2/plugin-manager/","text":"Plugin Manager The AdapterPluginManager extends the laminas-servicemanager AbstractPluginManager , and has the following behaviors: It will only return Laminas\\Serializer\\Adapter\\AdapterInterface instances. Since 2.10.0 : It defines short-name aliases for all shipped serializers (the class name minus the namespace), in a variety of casing combinations. All services are shared by default; a new instance will only be created once and shared each time you call get() . Factory Laminas\\Serializer\\AdapterPluginManager is mapped to the factory. Laminas\\Serializer\\AdapterPluginManagerFactory when wired to the dependency injection container. The factory will be automatically registered when loading/installing the Laminas\\Serializer module in laminas-mvc and/or loading/installing the ConfigProvider into a Mezzio application. Since version 2.10.0, the factory will look for the config service, and use the serializers configuration key to seed it with additional services. This configuration key should map to an array that follows standard laminas-servicemanager configuration . To add your own serializer you can add the following configuration: // config/autoload/serializers.global.php return [ 'serializers' =&gt; [ 'factories' =&gt; [ \\App\\MyCustomSerializer::class =&gt; \\App\\Container\\MyCustomSerializerFactory::class, ], ], ];","title":"Plugin Manager"},{"location":"v2/plugin-manager/#plugin-manager","text":"The AdapterPluginManager extends the laminas-servicemanager AbstractPluginManager , and has the following behaviors: It will only return Laminas\\Serializer\\Adapter\\AdapterInterface instances. Since 2.10.0 : It defines short-name aliases for all shipped serializers (the class name minus the namespace), in a variety of casing combinations. All services are shared by default; a new instance will only be created once and shared each time you call get() .","title":"Plugin Manager"},{"location":"v2/plugin-manager/#factory","text":"Laminas\\Serializer\\AdapterPluginManager is mapped to the factory. Laminas\\Serializer\\AdapterPluginManagerFactory when wired to the dependency injection container. The factory will be automatically registered when loading/installing the Laminas\\Serializer module in laminas-mvc and/or loading/installing the ConfigProvider into a Mezzio application. Since version 2.10.0, the factory will look for the config service, and use the serializers configuration key to seed it with additional services. This configuration key should map to an array that follows standard laminas-servicemanager configuration . To add your own serializer you can add the following configuration: // config/autoload/serializers.global.php return [ 'serializers' =&gt; [ 'factories' =&gt; [ \\App\\MyCustomSerializer::class =&gt; \\App\\Container\\MyCustomSerializerFactory::class, ], ], ];","title":"Factory"},{"location":"v3/adapter/","text":"Adapters laminas-serializer adapters handle serialization to and deserialization from specific representations. Each adapter has its own strengths. In some cases, not every PHP datatype (e.g., objects) can be converted to a string representation. In most such cases, the type will be converted to a similar type that is serializable. As an example, PHP objects will often be cast to arrays. If this fails, a Laminas\\Serializer\\Exception\\ExceptionInterface will be thrown. The PhpSerialize Adapter The Laminas\\Serializer\\Adapter\\PhpSerialize adapter uses the built-in serialize() / unserialize() functions, and is a good default adapter choice. Available options include: Option Data Type Default Value Description unserialize_class_whitelist array or bool true The allowed classes for unserialize(), see unserialize() for more information. Only available on PHP 7.0 or higher. The IgBinary Adapter Igbinary was originally released by Sulake Dynamoid Oy and since 2011-03-14 moved to PECL and maintained by Pierre Joye. It's a drop-in replacement for the standard PHP serializer. Instead of using a costly textual representation, igbinary stores PHP data structures in a compact binary form. Savings are significant when using memcached or similar memory based storages for serialized data. You need the igbinary PHP extension installed on your system in order to use this adapter. There are no configurable options for this adapter. The Json Adapter The JSON adapter provides a bridge to the laminas-json component. Available options include: Option Data Type Default Value cycle_check boolean false object_decode_type Laminas\\Json\\Json::TYPE_* Laminas\\Json\\Json::TYPE_ARRAY enable_json_expr_finder boolean false The PhpCode Adapter The Laminas\\Serializer\\Adapter\\PhpCode adapter generates a parsable PHP code representation using var_export() . To restore, the data will be executed using eval . There are no configuration options for this adapter. Unserializing Objects Objects will be serialized using the __set_state magic method. If the class doesn't implement this method, a fatal error will occur during execution. Uses eval() The PhpCode adapter utilizes eval() to unserialize. This introduces both a performance and potential security issue as a new process will be executed. Typically, you should use the PhpSerialize adapter unless you require human-readability of the serialized data.","title":"Adapters"},{"location":"v3/adapter/#adapters","text":"laminas-serializer adapters handle serialization to and deserialization from specific representations. Each adapter has its own strengths. In some cases, not every PHP datatype (e.g., objects) can be converted to a string representation. In most such cases, the type will be converted to a similar type that is serializable. As an example, PHP objects will often be cast to arrays. If this fails, a Laminas\\Serializer\\Exception\\ExceptionInterface will be thrown.","title":"Adapters"},{"location":"v3/adapter/#the-phpserialize-adapter","text":"The Laminas\\Serializer\\Adapter\\PhpSerialize adapter uses the built-in serialize() / unserialize() functions, and is a good default adapter choice. Available options include: Option Data Type Default Value Description unserialize_class_whitelist array or bool true The allowed classes for unserialize(), see unserialize() for more information. Only available on PHP 7.0 or higher.","title":"The PhpSerialize Adapter"},{"location":"v3/adapter/#the-igbinary-adapter","text":"Igbinary was originally released by Sulake Dynamoid Oy and since 2011-03-14 moved to PECL and maintained by Pierre Joye. It's a drop-in replacement for the standard PHP serializer. Instead of using a costly textual representation, igbinary stores PHP data structures in a compact binary form. Savings are significant when using memcached or similar memory based storages for serialized data. You need the igbinary PHP extension installed on your system in order to use this adapter. There are no configurable options for this adapter.","title":"The IgBinary Adapter"},{"location":"v3/adapter/#the-json-adapter","text":"The JSON adapter provides a bridge to the laminas-json component. Available options include: Option Data Type Default Value cycle_check boolean false object_decode_type Laminas\\Json\\Json::TYPE_* Laminas\\Json\\Json::TYPE_ARRAY enable_json_expr_finder boolean false","title":"The Json Adapter"},{"location":"v3/adapter/#the-phpcode-adapter","text":"The Laminas\\Serializer\\Adapter\\PhpCode adapter generates a parsable PHP code representation using var_export() . To restore, the data will be executed using eval . There are no configuration options for this adapter. Unserializing Objects Objects will be serialized using the __set_state magic method. If the class doesn't implement this method, a fatal error will occur during execution. Uses eval() The PhpCode adapter utilizes eval() to unserialize. This introduces both a performance and potential security issue as a new process will be executed. Typically, you should use the PhpSerialize adapter unless you require human-readability of the serialized data.","title":"The PhpCode Adapter"},{"location":"v3/basic-usage/","text":"Basic Usage Serializing adapters can either be created from the provided Laminas\\Serializer\\AdapterPluginManager#build method, or by instantiating one of the Laminas\\Serializer\\Adapter\\* classes. use Laminas\\Serializer\\Adapter; use Laminas\\Serializer\\AdapterPluginManager; use Laminas\\Serializer\\Exception; use Laminas\\Serializer\\Serializer; $plugins = new AdapterPluginManager(); // Via plugin manager: $serializer = $plugins-&gt;build(Adapter\\PhpSerialize::class); // Alternately: $serializer = new Adapter\\PhpSerialize(); // Now $serializer is an instance of Laminas\\Serializer\\Adapter\\AdapterInterface, // specifically Laminas\\Serializer\\Adapter\\PhpSerialize try { $serialized = $serializer-&gt;serialize($data); // now $serialized is a string $unserialized = $serializer-&gt;unserialize($serialized); // now $data == $unserialized } catch (Exception\\ExceptionInterface $e) { echo $e; } The method AdapterInterface#serialize generates a storable string. To regenerate this serialized data, call the method AdapterInterface#unserialize . Any time an error is encountered serializing or unserializing, the adapter will throw a Laminas\\Serializer\\Exception\\ExceptionInterface . Configuration Options To configure a serializer adapter, you can optionally use an instance of Laminas\\Serializer\\Adapter\\AdapterOptions , an instance of one of the adapter specific options class, an array , or a Traversable object. The adapter will convert it into the adapter specific options class instance (if present) or into the basic Laminas\\Serializer\\Adapter\\AdapterOptions class instance. Options can be passed as the second argument to the provided via the adapter's setOptions method, or as constructor arguments when directly instantiating an adapter. Available Methods Each serializer implements the interface Laminas\\Serializer\\Adapter\\AdapterInterface . This interface defines the following methods: Method signature Description serialize(mixed $value) : string Generates a storable representation of a value. unserialize(string $value) : mixed Creates a PHP value from a stored representation. Project Defaults To configure a default serializer (other than PhpSerializer , which is already pre-configured), you can override the dependency configuration in your project by implementing the following file config/autoload/laminas-serializer.global.php : use Laminas\\Serializer\\Adapter\\AdapterInterface; use Laminas\\Serializer\\Adapter\\Json; use Laminas\\Serializer\\GenericSerializerFactory; // Adapter options can hold adapter specific options, please refer to the adapter configuration documentation section $adapterOptions = ['cycle_check' =&gt; true]; return [ // mezzio projects 'dependencies' =&gt; [ 'factories' =&gt; [ AdapterInterface::class =&gt; new GenericSerializerFactory(Json::class, $adapterOptions), ], ], // laminas-mvc projects 'service_manager' =&gt; [ 'factories' =&gt; [ AdapterInterface::class =&gt; new GenericSerializerFactory(Json::class, $adapterOptions), ], ], ]; Defaults for PHP Serializer The PHP serializer does not have any defaults configured. If you want to modify the options of the PhpSerializer default, you will have to provide the config as shown above but with the PhpSerializer class and the options you want to use.","title":"Basic Usage"},{"location":"v3/basic-usage/#basic-usage","text":"Serializing adapters can either be created from the provided Laminas\\Serializer\\AdapterPluginManager#build method, or by instantiating one of the Laminas\\Serializer\\Adapter\\* classes. use Laminas\\Serializer\\Adapter; use Laminas\\Serializer\\AdapterPluginManager; use Laminas\\Serializer\\Exception; use Laminas\\Serializer\\Serializer; $plugins = new AdapterPluginManager(); // Via plugin manager: $serializer = $plugins-&gt;build(Adapter\\PhpSerialize::class); // Alternately: $serializer = new Adapter\\PhpSerialize(); // Now $serializer is an instance of Laminas\\Serializer\\Adapter\\AdapterInterface, // specifically Laminas\\Serializer\\Adapter\\PhpSerialize try { $serialized = $serializer-&gt;serialize($data); // now $serialized is a string $unserialized = $serializer-&gt;unserialize($serialized); // now $data == $unserialized } catch (Exception\\ExceptionInterface $e) { echo $e; } The method AdapterInterface#serialize generates a storable string. To regenerate this serialized data, call the method AdapterInterface#unserialize . Any time an error is encountered serializing or unserializing, the adapter will throw a Laminas\\Serializer\\Exception\\ExceptionInterface .","title":"Basic Usage"},{"location":"v3/basic-usage/#configuration-options","text":"To configure a serializer adapter, you can optionally use an instance of Laminas\\Serializer\\Adapter\\AdapterOptions , an instance of one of the adapter specific options class, an array , or a Traversable object. The adapter will convert it into the adapter specific options class instance (if present) or into the basic Laminas\\Serializer\\Adapter\\AdapterOptions class instance. Options can be passed as the second argument to the provided via the adapter's setOptions method, or as constructor arguments when directly instantiating an adapter.","title":"Configuration Options"},{"location":"v3/basic-usage/#available-methods","text":"Each serializer implements the interface Laminas\\Serializer\\Adapter\\AdapterInterface . This interface defines the following methods: Method signature Description serialize(mixed $value) : string Generates a storable representation of a value. unserialize(string $value) : mixed Creates a PHP value from a stored representation.","title":"Available Methods"},{"location":"v3/basic-usage/#project-defaults","text":"To configure a default serializer (other than PhpSerializer , which is already pre-configured), you can override the dependency configuration in your project by implementing the following file config/autoload/laminas-serializer.global.php : use Laminas\\Serializer\\Adapter\\AdapterInterface; use Laminas\\Serializer\\Adapter\\Json; use Laminas\\Serializer\\GenericSerializerFactory; // Adapter options can hold adapter specific options, please refer to the adapter configuration documentation section $adapterOptions = ['cycle_check' =&gt; true]; return [ // mezzio projects 'dependencies' =&gt; [ 'factories' =&gt; [ AdapterInterface::class =&gt; new GenericSerializerFactory(Json::class, $adapterOptions), ], ], // laminas-mvc projects 'service_manager' =&gt; [ 'factories' =&gt; [ AdapterInterface::class =&gt; new GenericSerializerFactory(Json::class, $adapterOptions), ], ], ]; Defaults for PHP Serializer The PHP serializer does not have any defaults configured. If you want to modify the options of the PhpSerializer default, you will have to provide the config as shown above but with the PhpSerializer class and the options you want to use.","title":"Project Defaults"},{"location":"v3/installation/","text":"This Is Only a Placeholder The content of this page can be found under: https://github.com/laminas/documentation-theme/blob/master/theme/pages/installation.html","title":"Installation"},{"location":"v3/installation/#this-is-only-a-placeholder","text":"The content of this page can be found under: https://github.com/laminas/documentation-theme/blob/master/theme/pages/installation.html","title":"This Is Only a Placeholder"},{"location":"v3/intro/","text":"Introduction laminas-serialzier provides an adapter-based interface for serializing and deserializing PHP types to and from different representations. For more information what a serializer is read the wikipedia page of Serialization .","title":"Introduction"},{"location":"v3/intro/#introduction","text":"laminas-serialzier provides an adapter-based interface for serializing and deserializing PHP types to and from different representations. For more information what a serializer is read the wikipedia page of Serialization .","title":"Introduction"},{"location":"v3/plugin-manager/","text":"Plugin Manager The AdapterPluginManager extends the laminas-servicemanager AbstractPluginManager , and has the following behaviors: It will only return Laminas\\Serializer\\Adapter\\AdapterInterface instances. It defines short-name aliases for all shipped serializers (the class name minus the namespace), in a variety of casing combinations. All services are shared by default; a new instance will only be created once and shared each time you call get() . Factory Laminas\\Serializer\\AdapterPluginManager is mapped to the factory. Laminas\\Serializer\\AdapterPluginManagerFactory when wired to the dependency injection container. The factory will be automatically registered when loading/installing the Laminas\\Serializer module in laminas-mvc and/or loading/installing the ConfigProvider into a Mezzio application. The factory will look for the config service, and use the serializers configuration key to seed it with additional services. This configuration key should map to an array that follows standard laminas-servicemanager configuration . To add your own serializer you can add the following configuration: // config/autoload/serializers.global.php return [ 'serializers' =&gt; [ 'factories' =&gt; [ \\App\\MyCustomSerializer::class =&gt; \\App\\Container\\MyCustomSerializerFactory::class, ], ], ];","title":"Plugin Manager"},{"location":"v3/plugin-manager/#plugin-manager","text":"The AdapterPluginManager extends the laminas-servicemanager AbstractPluginManager , and has the following behaviors: It will only return Laminas\\Serializer\\Adapter\\AdapterInterface instances. It defines short-name aliases for all shipped serializers (the class name minus the namespace), in a variety of casing combinations. All services are shared by default; a new instance will only be created once and shared each time you call get() .","title":"Plugin Manager"},{"location":"v3/plugin-manager/#factory","text":"Laminas\\Serializer\\AdapterPluginManager is mapped to the factory. Laminas\\Serializer\\AdapterPluginManagerFactory when wired to the dependency injection container. The factory will be automatically registered when loading/installing the Laminas\\Serializer module in laminas-mvc and/or loading/installing the ConfigProvider into a Mezzio application. The factory will look for the config service, and use the serializers configuration key to seed it with additional services. This configuration key should map to an array that follows standard laminas-servicemanager configuration . To add your own serializer you can add the following configuration: // config/autoload/serializers.global.php return [ 'serializers' =&gt; [ 'factories' =&gt; [ \\App\\MyCustomSerializer::class =&gt; \\App\\Container\\MyCustomSerializerFactory::class, ], ], ];","title":"Factory"},{"location":"v3/migration/to-version-3/","text":"Migration to Version 3.0 Upgrading laminas-serializer will require some code changes, depending on how the serializers were used. Breaking Changes Static Methods in Serializer Implementation The biggest breaking change in v3 relates to the Laminas\\Serializer\\Serializer . This class has been removed due to its potential side-effects and for not following the S within SOLID . This class was: - a registry (by providing a method to both persist and provide a \"default\" serializer instance) - a factory (by providing methods to create objects based on arguments passed to methods) - a serializer (by providing serialize and unserialize which then called magically an AdapterInterface implementation) To enable projects and 3rd-party libraries to provide their own serializer implementations (which are also available via the AdapterPluginManager ), this class was removed in favor of dependency injection. The amount of work to migrate projects consuming the Laminas\\Serializer\\Serializer class depends on the way how it was used in projects. Projects Making Use of Serializer#setDefaultAdapter In case you are using this method within a laminas-mvc or mezzio project, laminas got your back. You can now configure the projects default adapter by using the dependency configuration . If your project uses Serializer#setDefaultAdapter outside of laminas-mvc or mezzio projects, you have to provide your own registry. You can either copy the current implementation into your project or implement an own minimal implementation such as: namespace MyNamespace; use Laminas\\Serializer\\Adapter\\AdapterInterface;use Laminas\\Serializer\\Adapter\\PhpSerialize; final class SerializerRegistry { private static null|AdapterInterface $adapter = null; public static function getDefaultAdapter(): AdapterInterface { if (self::$adapter) { return self::$adapter; } return self::$adapter = new PhpSerialize(); } public static function setDefaultAdapter(AdapterInterface $adapter): void { self::$adapter = $adapter; } } It is highly recommended to use dependency injection over a registry. Projects Making Use of Serializer#getDefaultAdapter In case you are using this method within a laminas-mvc or mezzio project, laminas got your back. You can now retrieve the projects default adapter by using the container: $container-&gt;get(\\Laminas\\Serializer\\Adapter\\AdapterInterface::class); . This will always provide an instance of AdapterInterface ( PhpSerialize by-default unless configured otherwise) and therefore provides the same value as Serializer#getDefaultAdapter . Outside of laminas frameworks, the changes are depending on how the project is interacting with the Serializer class. If your project does not call Serializer#setDefaultAdapter , code can be replaced with new \\Laminas\\Serializer\\Adapter\\PhpSerialize() . If you think that is not a good solution, feel free to implement your own registry. Refer to the section above on how to do so. Projects Making Use of Serializer#serialize or Serializer#unserialize There are no replacements for these methods. You can either instantiate PhpSerialize adapter (which is the default) or, in case your projects uses Serializer#setDefaultAdapter , please refer to the section above . Projects Making Use of Serializer#factory This method has multiple ways to get called: Passing an Instance of AdapterInterface use Laminas\\Serializer\\Adapter\\PhpSerialize; $adapter = new PhpSerialize(); $adapter = Serializer::factory($adapter); // unnecessary method call $adapter = Serializer::factory($adapter, ['unserialize_class_whitelist' =&gt; false]); // unnecessary method call In both cases, the $adapter was already an instance of an adapter prior calling the factory method. The factory method always immediately returned the $adapter in case it was not a string and therefore, the method calls can be simply removed. Passing an Already Known class-string use Laminas\\Serializer\\Adapter\\PhpSerialize; $adapterClassName = PhpSerialize::class; $adapter = Serializer::factory($adapterClassName); $adapter = Serializer::factory($adapterClassName, ['unserialize_class_whitelist' =&gt; false]); In this example, we obviously are aware that we want a PhpSerialize serializer. Please directly instantiate the serializer instead of calling the factory method. Passing a Service Alias $adapterAlias = 'phpserialize'; $adapter = Serializer::factory($adapterAlias); $adapter = Serializer::factory($adapterAlias, ['unserialize_class_whitelist' =&gt; false]); Same as the example where we pass class-string . Please refactor your code to directly instantiate the serializer instead. Passing an Unknown Value use Laminas\\Serializer\\Adapter\\AdapterInterface; function myfunction(string|AdapterInterface $adapterAliasOrClassStringOrInstance, ?array $adapterOptions = null): string { $adapter = Serializer::factory($adapterAliasOrClassStringOrInstance, $adapterOptions); return $adapter-&gt;serialize(new stdClass()); } This will require you to use the Laminas\\Serializer\\AdapterPluginManager . use Laminas\\Serializer\\Adapter\\AdapterInterface; use Laminas\\Serializer\\AdapterPluginManager; function myfunction(string|AdapterInterface $adapterAliasOrClassStringOrInstance, ?array $adapterOptions = null): string { $adapter = $adapterAliasOrClassStringOrInstance; if (!$adapter instanceof AdapterInterface) { $plugins = new AdapterPluginManager(); $adapter = $plugins-&gt;build($adapterAliasOrClassStringOrInstance, $adapterOptions); } return $adapter-&gt;serialize(new stdClass()); } Niche Serializer Implementations With v3, some of the more niche serializer implementations were removed. MsgPack PythonPickle Wddx All of these serializers were already deprecated in v2.15.0. For a more detailed reasoning on why these were removed please refer to the RFC . In case your project is still depending on these implementations, feel free to copy the adapter source from latest 2.x and adapt the required type-additions to comply with v3.0+. Checklist laminas-serializer is updated to the latest version from within 2.x Search your code for the usage of Laminas\\Serializer\\Serializer , if this class is in-use, please refer to its dedicated migration section If your project provides an implementation of AdapterInterface or AbstractAdapter , please migrate your code to comply with the latest type-additions Check if your project is using one of the niche serializer implementations which were removed with this release","title":"Migration to Version 3.0"},{"location":"v3/migration/to-version-3/#migration-to-version-30","text":"Upgrading laminas-serializer will require some code changes, depending on how the serializers were used.","title":"Migration to Version 3.0"},{"location":"v3/migration/to-version-3/#breaking-changes","text":"","title":"Breaking Changes"},{"location":"v3/migration/to-version-3/#checklist","text":"laminas-serializer is updated to the latest version from within 2.x Search your code for the usage of Laminas\\Serializer\\Serializer , if this class is in-use, please refer to its dedicated migration section If your project provides an implementation of AdapterInterface or AbstractAdapter , please migrate your code to comply with the latest type-additions Check if your project is using one of the niche serializer implementations which were removed with this release","title":"Checklist"}]}